import os
import sys
import json
import re
from typing import List, Dict, Optional
from openai import OpenAI
from dotenv import load_dotenv
import pandas as pd
from rapidfuzz import fuzz, process

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
try:
    sys.stdout.reconfigure(encoding='utf-8')
    sys.stdin.reconfigure(encoding='utf-8')
except (AttributeError, OSError):
    pass

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

HF_TOKEN = os.getenv("HF_TOKEN")
if not HF_TOKEN:
    print("–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω HF_TOKEN –≤ —Ñ–∞–π–ª–µ .env")
    exit(1)

class LaptopAdvisor:
    def __init__(self, data_path: str = "data/laptops.csv"):
        self.client = OpenAI(
            base_url="https://router.huggingface.co/v1",
            api_key=HF_TOKEN,
        )
        self.products = self._load_products(data_path)
        self.last_results = []
        self.current_filters = {}
        self.preferences = {
            'brand': None,
            'min_ram': None,
            'max_price': None,
            'cpu': None,
            'in_stock': None
        }
        self.available_brands = list(set(p['brand'] for p in self.products))

    def _load_products(self, path: str) -> List[Dict]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–æ—É—Ç–±—É–∫–∞—Ö –∏–∑ CSV"""
        try:
            df = pd.read_csv(path)
            df['price'] = df['price'].astype(float)
            df['ram_gb'] = df['ram_gb'].astype(int)
            df['in_stock'] = df['in_stock'].astype(bool)
            return df.to_dict('records')
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return []

    def _fuzzy_match_brand(self, query: str, threshold: int = 75) -> Optional[str]:
        """–ü–æ–∏—Å–∫ –±—Ä–µ–Ω–¥–∞ —Å —É—á–µ—Ç–æ–º –æ–ø–µ—á–∞—Ç–æ–∫"""
        if not query:
            return None
        query_lower = query.lower()
        for brand in self.available_brands:
            if brand.lower() == query_lower:
                return brand
        result = process.extractOne(query, self.available_brands, scorer=fuzz.WRatio)
        if result and result[1] >= threshold:
            return result[0]
        return None

    def _extract_filters(self, user_input: str) -> Dict:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞"""
        filters = {}

        if "–≤ –Ω–∞–ª–∏—á–∏–∏" in user_input.lower():
            filters["in_stock"] = True

        ram_match = re.search(r'(\d+)\s*gb|—Ä–∞–º\s*(\d+)', user_input.lower())
        if ram_match:
            ram_value = ram_match.group(1) or ram_match.group(2)
            filters["ram"] = int(ram_value)

        prompt = (
            "–ò–∑–≤–ª–µ–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–æ—É—Ç–±—É–∫–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º. "
            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: ram (int), max_price (float), cpu (str), brand (str), in_stock (bool). "
            "–î–ª—è in_stock –∏—Å–ø–æ–ª—å–∑—É–π true/false. "
            f"–ó–∞–ø—Ä–æ—Å: {user_input} "
            "–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ JSON, –Ω–∞–ø—Ä–∏–º–µ—Ä: {\"cpu\": \"Intel i7\", \"in_stock\": true}"
        )

        try:
            response = self.client.chat.completions.create(
                model="openai/gpt-oss-120b",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.3
            )
            if response and response.choices:
                gpt_filters = json.loads(response.choices[0].message.content)
                for key, value in gpt_filters.items():
                    if key not in filters:
                        filters[key] = value
                if "brand" in filters:
                    matched_brand = self._fuzzy_match_brand(filters["brand"])
                    if matched_brand:
                        filters["brand"] = matched_brand
                    else:
                        del filters["brand"]
                return filters
            return filters
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
            return filters

    def _apply_filters(self, filters: Dict) -> List[Dict]:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        filtered = self.products
        self.current_filters.update(filters)

        if self.preferences['brand']:
            filtered = [p for p in filtered if p['brand'].lower() == self.preferences['brand'].lower()]

        if "ram" in self.current_filters:
            filtered = [p for p in filtered if p['ram_gb'] >= self.current_filters["ram"]]
        if "max_price" in self.current_filters:
            filtered = [p for p in filtered if p['price'] <= self.current_filters["max_price"]]
        if "cpu" in self.current_filters:
            filtered = [p for p in filtered if self.current_filters["cpu"].lower() in p['cpu'].lower()]
        if "brand" in self.current_filters:
            matched_brand = self._fuzzy_match_brand(self.current_filters["brand"])
            if matched_brand:
                filtered = [p for p in filtered if p['brand'].lower() == matched_brand.lower()]
        if "in_stock" in self.current_filters:
            filtered = [p for p in filtered if p['in_stock'] == self.current_filters["in_stock"]]

        return filtered

    def _get_full_recommendation(self, products: List[Dict]) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –≤–∞–ª—é—Ç—ã"""
        if not products:
            return "‚ùå –ù–µ—Ç –Ω–æ—É—Ç–±—É–∫–æ–≤ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"

        prompt = (
            "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≤—ã–±–æ—Ä—É –Ω–æ—É—Ç–±—É–∫–æ–≤. –í—ã–±–µ—Ä–∏ –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ –æ–±–æ—Å–Ω—É–π –≤—ã–±–æ—Ä –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.\n"
            f"–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {json.dumps(self.preferences, ensure_ascii=False)}\n"
            f"–¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã: {json.dumps(self.current_filters, ensure_ascii=False)}\n"
            "–ù–æ—É—Ç–±—É–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n"
            f"{json.dumps(products[:10], ensure_ascii=False, indent=2)}\n"
            "–í–ê–ñ–ù–û: –í—Å–µ —Ü–µ–Ω—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–∫–∞–∑–∞–Ω—ã –≤ –î–û–õ–õ–ê–†–ê–• ($), –∞ –Ω–µ –≤ –µ–≤—Ä–æ!\n"
            "–£—á–∏—Ç—ã–≤–∞–π:\n"
            "1. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º\n"
            "2. –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏ –∫–∞—á–µ—Å—Ç–≤–∞\n"
            "3. –ù–∞–ª–∏—á–∏–µ –≤ –º–∞–≥–∞–∑–∏–Ω–µ\n"
            "4. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏\n"
            "–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:\n"
            "üèÜ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –Ω–æ—É—Ç–±—É–∫: [–ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ]\n"
            "üìå –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: [–æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã]\n"
            "üí° –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: [—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ]"
        )

        try:
            response = self.client.chat.completions.create(
                model="openai/gpt-oss-120b",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.3
            )
            if response and response.choices:
                recommendation = response.choices[0].message.content
                # –ó–∞–º–µ–Ω—è–µ–º –µ–≤—Ä–æ –Ω–∞ –¥–æ–ª–ª–∞—Ä—ã –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                recommendation = recommendation.replace("‚Ç¨", "$")
                recommendation = re.sub(r'(\d+)\s*–µ–≤—Ä–æ', r'$\1', recommendation, flags=re.IGNORECASE)
                return recommendation
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {e}")
            # –§–æ—Ä–º–∏—Ä—É–µ–º fallback —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
            fallback = ["‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é. –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:"]
            fallback.extend(f"- {p['brand']} {p['model']} (${p['price']:.2f})" for p in products[:3])
        return "\n".join(fallback)

    def _format_product(self, product: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ—É—Ç–±—É–∫–µ"""
        return (
            f"{product['brand']} {product['model']} | "
            f"RAM: {product['ram_gb']}GB | "
            f"CPU: {product['cpu']} | "
            f"–¶–µ–Ω–∞: ${product['price']:.2f} | "
            f"{'‚úÖ –í –Ω–∞–ª–∏—á–∏–∏' if product['in_stock'] else '‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏'}"
        )

    def _format_results(self, products: List[Dict]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–æ—É—Ç–±—É–∫–æ–≤"""
        if not products:
            return "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ—É—Ç–±—É–∫–æ–≤ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º."
        result = f"üîç –ù–∞–π–¥–µ–Ω–æ –Ω–æ—É—Ç–±—É–∫–æ–≤: {len(products)}\n"
        for i, p in enumerate(products[:10], 1):
            result += f"{i}. {self._format_product(p)}\n"
        if len(products) > 10:
            result += f"\n–ü–æ–∫–∞–∑–∞–Ω–æ 10 –∏–∑ {len(products)}. –£—Ç–æ—á–Ω–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏."
        return result

    def _compare_products(self, indices: List[int]) -> str:
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        if not self.last_results:
            return "‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫."

        selected = []
        for idx in indices:
            if 1 <= idx <= len(self.last_results):
                selected.append(self.last_results[idx - 1])

        if not selected:
            return f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –º–æ–¥–µ–ª–µ–π. –î–æ—Å—Ç—É–ø–Ω—ã –Ω–æ–º–µ—Ä–∞ –æ—Ç 1 –¥–æ {len(self.last_results)}."

        simplified = [
            {
                'brand': p['brand'],
                'model': p['model'],
                'cpu': p['cpu'],
                'ram_gb': p['ram_gb'],
                'price': f"${p['price']:.2f}",  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ª–ª–∞—Ä—ã
                'in_stock': p['in_stock']
            }
            for p in selected
        ]

        prompt = (
            "–°—Ä–∞–≤–Ω–∏ —Å–ª–µ–¥—É—é—â–∏–µ –Ω–æ—É—Ç–±—É–∫–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é:\n"
            f"{json.dumps(simplified, ensure_ascii=False, indent=2)}\n"
            "–í–ê–ñ–ù–û: –í—Å–µ —Ü–µ–Ω—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–∫–∞–∑–∞–Ω—ã –≤ –î–û–õ–õ–ê–†–ê–• ($), –∞ –Ω–µ –≤ –µ–≤—Ä–æ!\n"
            "–°–¥–µ–ª–∞–π:\n"
            "1. –î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫\n"
            "2. –û—Ü–µ–Ω–∫—É –ø–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—é —Ü–µ–Ω–∞/–∫–∞—á–µ—Å—Ç–≤–æ\n"
            "3. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ª—É—á—à–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º\n"
            "–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º:\n"
            "üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–æ—É—Ç–±—É–∫–æ–≤:\n"
            "[–ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—á–Ω–æ–π –∏–ª–∏ —Å–ø–∏—Å–∫–æ–≤–æ–π —Ñ–æ—Ä–º–µ]\n"
            "üèÜ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:\n"
            "[—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞]"
        )

        try:
            response = self.client.chat.completions.create(
                model="openai/gpt-oss-120b",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.2
            )
            if response and response.choices:
                comparison = response.choices[0].message.content
                # –ó–∞–º–µ–Ω—è–µ–º –µ–≤—Ä–æ –Ω–∞ –¥–æ–ª–ª–∞—Ä—ã –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏
                comparison = comparison.replace("‚Ç¨", "$")
                comparison = re.sub(r'(\d+)\s*–µ–≤—Ä–æ', r'$\1', comparison, flags=re.IGNORECASE)
                return comparison
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {e}")

        # Fallback —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        comparison = "üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ:\n"
        for i, p in enumerate(selected, 1):
            comparison += (
                f"\n{i}. {p['brand']} {p['model']}\n"
                f"   CPU: {p['cpu']}, RAM: {p['ram_gb']}GB\n"
                f"   –¶–µ–Ω–∞: ${p['price']:.2f}\n"
                f"   {'‚úÖ –í –Ω–∞–ª–∏—á–∏–∏' if p['in_stock'] else '‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏'}"
            )

        best = min(selected, key=lambda x: (0 if x['in_stock'] else 1, x['price'] / x['ram_gb']))
        comparison += (
            f"\n\nüèÜ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {best['brand']} {best['model']}\n"
            f"üí° –ü–æ—á–µ–º—É: –õ—É—á—à–µ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Å—Ä–µ–¥–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö."
        )
        return comparison

    def process_command(self, user_input: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_input_lower = user_input.strip().lower()
        original_input = user_input.strip()

        if user_input_lower in ["–≤—ã—Ö–æ–¥", "exit", "quit"]:
            return "exit"

        if user_input_lower.startswith("–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é"):
            brand = original_input.split(maxsplit=1)[1].strip()
            matched_brand = self._fuzzy_match_brand(brand)
            if matched_brand:
                self.preferences['brand'] = matched_brand
                return f"‚úÖ –ó–∞–ø–æ–º–Ω–∏–ª –≤–∞—à–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ: {matched_brand}"
            return f"‚ùå –ë—Ä–µ–Ω–¥ '{brand}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ –±—Ä–µ–Ω–¥—ã: {', '.join(self.available_brands)}"

        if user_input_lower.startswith(("—Å—Ä–∞–≤–Ω–∏", "compare")):
            numbers = [int(match) for match in re.findall(r'\d+', original_input)]
            return self._compare_products(numbers)

        new_filters = self._extract_filters(original_input)
        filtered = self._apply_filters(new_filters)
        self.last_results = filtered.copy()

        if any(word in user_input_lower for word in ["—Ä–µ–∫–æ–º–µ–Ω–¥", "—Å–æ–≤–µ—Ç", "–ø–æ—Å–æ–≤–µ—Ç—É–π"]):
            return self._get_full_recommendation(self.last_results)

        return self._format_results(self.last_results)


def main():
    advisor = LaptopAdvisor()
    print("üíª –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤—ã–±—Ä–∞—Ç—å –Ω–æ—É—Ç–±—É–∫. –ó–∞–¥–∞–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–ª–∏ '–≤—ã—Ö–æ–¥'")
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    print("- '–ø–æ–∫–∞–∂–∏ –Ω–æ—É—Ç–±—É–∫–∏ —Å Intel i7' - –ø–æ–∏—Å–∫ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º")
    print("- '—Ä–µ–∫–æ–º–µ–Ω–¥—É–π' - –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é")
    print("- '–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é –ë–†–ï–ù–î' - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –ø–æ –±—Ä–µ–Ω–¥—É")
    print("- '—Å—Ä–∞–≤–Ω–∏ 1 2 3' - —Å—Ä–∞–≤–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏")
    print("- '–≤—ã—Ö–æ–¥' - –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É\n")

    while True:
        try:
            user_input = input("–í—ã: ")
            response = advisor.process_command(user_input)
            if response == "exit":
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            print("\n" + response + "\n")
        except KeyboardInterrupt:
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        except Exception as e:
            print(f"\n‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}\n")


if __name__ == "__main__":
    main()